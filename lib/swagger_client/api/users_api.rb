=begin
#SARD API

#This is the SARD API. For more information visit <a href=\"https://www.sardjv.co.uk\">www.sardjv.co.uk</a>.

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.15

=end

require 'uri'

module SwaggerClient
  class UsersApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # users index
    # @param [Hash] opts the optional parameters
    # @option opts [String] :page 
    # @option opts [String] :per_page 
    # @option opts [String] :filter_id 
    # @option opts [String] :filter_email 
    # @option opts [String] :filter_tenant_id 
    # @return [UsersResponse]
    def api_v1_users_get(opts = {})
      data, _status_code, _headers = api_v1_users_get_with_http_info(opts)
      data
    end

    # users index
    # @param [Hash] opts the optional parameters
    # @option opts [String] :page 
    # @option opts [String] :per_page 
    # @option opts [String] :filter_id 
    # @option opts [String] :filter_email 
    # @option opts [String] :filter_tenant_id 
    # @return [Array<(UsersResponse, Fixnum, Hash)>] UsersResponse data, response status code and response headers
    def api_v1_users_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.api_v1_users_get ...'
      end
      # resource path
      local_var_path = '/api/v1/users'

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'filter[id]'] = opts[:'filter_id'] if !opts[:'filter_id'].nil?
      query_params[:'filter[email]'] = opts[:'filter_email'] if !opts[:'filter_email'].nil?
      query_params[:'filter[tenant_id]'] = opts[:'filter_tenant_id'] if !opts[:'filter_tenant_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiEmail', 'apiToken']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UsersResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#api_v1_users_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # show user
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [UserResponse]
    def api_v1_users_id_get(id, opts = {})
      data, _status_code, _headers = api_v1_users_id_get_with_http_info(id, opts)
      data
    end

    # show user
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UserResponse, Fixnum, Hash)>] UserResponse data, response status code and response headers
    def api_v1_users_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.api_v1_users_id_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UsersApi.api_v1_users_id_get"
      end
      # resource path
      local_var_path = '/api/v1/users/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiEmail', 'apiToken']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UserResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#api_v1_users_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # update user
    # @param id 
    # @param [Hash] opts the optional parameters
    # @option opts [UserPatchParams] :user 
    # @return [UserPatchParams]
    def api_v1_users_id_patch(id, opts = {})
      data, _status_code, _headers = api_v1_users_id_patch_with_http_info(id, opts)
      data
    end

    # update user
    # @param id 
    # @param [Hash] opts the optional parameters
    # @option opts [UserPatchParams] :user 
    # @return [Array<(UserPatchParams, Fixnum, Hash)>] UserPatchParams data, response status code and response headers
    def api_v1_users_id_patch_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.api_v1_users_id_patch ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UsersApi.api_v1_users_id_patch"
      end
      # resource path
      local_var_path = '/api/v1/users/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/vnd.api+json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'user'])
      auth_names = ['apiEmail', 'apiToken']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UserPatchParams')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#api_v1_users_id_patch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # create user
    # @param [Hash] opts the optional parameters
    # @option opts [UserPostParams] :user 
    # @return [UserPostParams]
    def api_v1_users_post(opts = {})
      data, _status_code, _headers = api_v1_users_post_with_http_info(opts)
      data
    end

    # create user
    # @param [Hash] opts the optional parameters
    # @option opts [UserPostParams] :user 
    # @return [Array<(UserPostParams, Fixnum, Hash)>] UserPostParams data, response status code and response headers
    def api_v1_users_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.api_v1_users_post ...'
      end
      # resource path
      local_var_path = '/api/v1/users'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/vnd.api+json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'user'])
      auth_names = ['apiEmail', 'apiToken']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UserPostParams')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#api_v1_users_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
