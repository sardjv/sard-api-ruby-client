=begin
#SARD API

#This is the SARD API. For more information visit <a href=\"https://www.sardjv.co.uk\">www.sardjv.co.uk</a>.

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.15

=end

require 'date'

module SwaggerClient
  class UserAttributes
    attr_accessor :additional_telephone_number

    attr_accessor :allow_proactive_chat

    attr_accessor :appraisals_viewable_by_ro

    attr_accessor :chat_wanted_message

    attr_accessor :chat_wanted

    attr_accessor :delegate_ids

    attr_accessor :directorate_id

    attr_accessor :dormant_reason

    attr_accessor :dormant

    attr_accessor :dummy_account

    attr_accessor :email

    attr_accessor :esr_role_id

    attr_accessor :first_name

    attr_accessor :has_eleave

    attr_accessor :has_job_planning

    attr_accessor :has_medical_revalidation

    attr_accessor :has_msf

    attr_accessor :is_trainee

    attr_accessor :last_name

    attr_accessor :location_org_l4_id

    attr_accessor :medic_group_ids

    attr_accessor :medical_role_ids

    attr_accessor :position_title_id

    attr_accessor :preferred_name

    attr_accessor :recommendation_not_applicable

    attr_accessor :recommendation_not_applicable_reason

    attr_accessor :role_ids

    attr_accessor :site_name_id

    attr_accessor :speciality_id

    attr_accessor :team_org_l5_id

    attr_accessor :tenant_id

    attr_accessor :telephone_number

    attr_accessor :title

    attr_accessor :trust_end_date

    attr_accessor :trust_start_date

    attr_accessor :ui_employee_number

    attr_accessor :welcome_confirmed

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'additional_telephone_number' => :'additional_telephone_number',
        :'allow_proactive_chat' => :'allow_proactive_chat',
        :'appraisals_viewable_by_ro' => :'appraisals_viewable_by_ro',
        :'chat_wanted_message' => :'chat_wanted_message',
        :'chat_wanted' => :'chat_wanted',
        :'delegate_ids' => :'delegate_ids',
        :'directorate_id' => :'directorate_id',
        :'dormant_reason' => :'dormant_reason',
        :'dormant' => :'dormant',
        :'dummy_account' => :'dummy_account',
        :'email' => :'email',
        :'esr_role_id' => :'esr_role_id',
        :'first_name' => :'first_name',
        :'has_eleave' => :'has_eleave',
        :'has_job_planning' => :'has_job_planning',
        :'has_medical_revalidation' => :'has_medical_revalidation',
        :'has_msf' => :'has_msf',
        :'is_trainee' => :'is_trainee',
        :'last_name' => :'last_name',
        :'location_org_l4_id' => :'location_org_l4_id',
        :'medic_group_ids' => :'medic_group_ids',
        :'medical_role_ids' => :'medical_role_ids',
        :'position_title_id' => :'position_title_id',
        :'preferred_name' => :'preferred_name',
        :'recommendation_not_applicable' => :'recommendation_not_applicable',
        :'recommendation_not_applicable_reason' => :'recommendation_not_applicable_reason',
        :'role_ids' => :'role_ids',
        :'site_name_id' => :'site_name_id',
        :'speciality_id' => :'speciality_id',
        :'team_org_l5_id' => :'team_org_l5_id',
        :'tenant_id' => :'tenant_id',
        :'telephone_number' => :'telephone_number',
        :'title' => :'title',
        :'trust_end_date' => :'trust_end_date',
        :'trust_start_date' => :'trust_start_date',
        :'ui_employee_number' => :'ui_employee_number',
        :'welcome_confirmed' => :'welcome_confirmed'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'additional_telephone_number' => :'String',
        :'allow_proactive_chat' => :'BOOLEAN',
        :'appraisals_viewable_by_ro' => :'BOOLEAN',
        :'chat_wanted_message' => :'String',
        :'chat_wanted' => :'BOOLEAN',
        :'delegate_ids' => :'Array<Object>',
        :'directorate_id' => :'String',
        :'dormant_reason' => :'String',
        :'dormant' => :'BOOLEAN',
        :'dummy_account' => :'BOOLEAN',
        :'email' => :'String',
        :'esr_role_id' => :'String',
        :'first_name' => :'String',
        :'has_eleave' => :'BOOLEAN',
        :'has_job_planning' => :'BOOLEAN',
        :'has_medical_revalidation' => :'BOOLEAN',
        :'has_msf' => :'BOOLEAN',
        :'is_trainee' => :'BOOLEAN',
        :'last_name' => :'String',
        :'location_org_l4_id' => :'String',
        :'medic_group_ids' => :'Array<Object>',
        :'medical_role_ids' => :'Array<Object>',
        :'position_title_id' => :'String',
        :'preferred_name' => :'String',
        :'recommendation_not_applicable' => :'BOOLEAN',
        :'recommendation_not_applicable_reason' => :'String',
        :'role_ids' => :'Array<Object>',
        :'site_name_id' => :'String',
        :'speciality_id' => :'String',
        :'team_org_l5_id' => :'String',
        :'tenant_id' => :'String',
        :'telephone_number' => :'String',
        :'title' => :'String',
        :'trust_end_date' => :'String',
        :'trust_start_date' => :'String',
        :'ui_employee_number' => :'Integer',
        :'welcome_confirmed' => :'BOOLEAN'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'additional_telephone_number')
        self.additional_telephone_number = attributes[:'additional_telephone_number']
      end

      if attributes.has_key?(:'allow_proactive_chat')
        self.allow_proactive_chat = attributes[:'allow_proactive_chat']
      end

      if attributes.has_key?(:'appraisals_viewable_by_ro')
        self.appraisals_viewable_by_ro = attributes[:'appraisals_viewable_by_ro']
      end

      if attributes.has_key?(:'chat_wanted_message')
        self.chat_wanted_message = attributes[:'chat_wanted_message']
      end

      if attributes.has_key?(:'chat_wanted')
        self.chat_wanted = attributes[:'chat_wanted']
      end

      if attributes.has_key?(:'delegate_ids')
        if (value = attributes[:'delegate_ids']).is_a?(Array)
          self.delegate_ids = value
        end
      end

      if attributes.has_key?(:'directorate_id')
        self.directorate_id = attributes[:'directorate_id']
      end

      if attributes.has_key?(:'dormant_reason')
        self.dormant_reason = attributes[:'dormant_reason']
      end

      if attributes.has_key?(:'dormant')
        self.dormant = attributes[:'dormant']
      end

      if attributes.has_key?(:'dummy_account')
        self.dummy_account = attributes[:'dummy_account']
      end

      if attributes.has_key?(:'email')
        self.email = attributes[:'email']
      end

      if attributes.has_key?(:'esr_role_id')
        self.esr_role_id = attributes[:'esr_role_id']
      end

      if attributes.has_key?(:'first_name')
        self.first_name = attributes[:'first_name']
      end

      if attributes.has_key?(:'has_eleave')
        self.has_eleave = attributes[:'has_eleave']
      end

      if attributes.has_key?(:'has_job_planning')
        self.has_job_planning = attributes[:'has_job_planning']
      end

      if attributes.has_key?(:'has_medical_revalidation')
        self.has_medical_revalidation = attributes[:'has_medical_revalidation']
      end

      if attributes.has_key?(:'has_msf')
        self.has_msf = attributes[:'has_msf']
      end

      if attributes.has_key?(:'is_trainee')
        self.is_trainee = attributes[:'is_trainee']
      end

      if attributes.has_key?(:'last_name')
        self.last_name = attributes[:'last_name']
      end

      if attributes.has_key?(:'location_org_l4_id')
        self.location_org_l4_id = attributes[:'location_org_l4_id']
      end

      if attributes.has_key?(:'medic_group_ids')
        if (value = attributes[:'medic_group_ids']).is_a?(Array)
          self.medic_group_ids = value
        end
      end

      if attributes.has_key?(:'medical_role_ids')
        if (value = attributes[:'medical_role_ids']).is_a?(Array)
          self.medical_role_ids = value
        end
      end

      if attributes.has_key?(:'position_title_id')
        self.position_title_id = attributes[:'position_title_id']
      end

      if attributes.has_key?(:'preferred_name')
        self.preferred_name = attributes[:'preferred_name']
      end

      if attributes.has_key?(:'recommendation_not_applicable')
        self.recommendation_not_applicable = attributes[:'recommendation_not_applicable']
      end

      if attributes.has_key?(:'recommendation_not_applicable_reason')
        self.recommendation_not_applicable_reason = attributes[:'recommendation_not_applicable_reason']
      end

      if attributes.has_key?(:'role_ids')
        if (value = attributes[:'role_ids']).is_a?(Array)
          self.role_ids = value
        end
      end

      if attributes.has_key?(:'site_name_id')
        self.site_name_id = attributes[:'site_name_id']
      end

      if attributes.has_key?(:'speciality_id')
        self.speciality_id = attributes[:'speciality_id']
      end

      if attributes.has_key?(:'team_org_l5_id')
        self.team_org_l5_id = attributes[:'team_org_l5_id']
      end

      if attributes.has_key?(:'tenant_id')
        self.tenant_id = attributes[:'tenant_id']
      end

      if attributes.has_key?(:'telephone_number')
        self.telephone_number = attributes[:'telephone_number']
      end

      if attributes.has_key?(:'title')
        self.title = attributes[:'title']
      end

      if attributes.has_key?(:'trust_end_date')
        self.trust_end_date = attributes[:'trust_end_date']
      end

      if attributes.has_key?(:'trust_start_date')
        self.trust_start_date = attributes[:'trust_start_date']
      end

      if attributes.has_key?(:'ui_employee_number')
        self.ui_employee_number = attributes[:'ui_employee_number']
      end

      if attributes.has_key?(:'welcome_confirmed')
        self.welcome_confirmed = attributes[:'welcome_confirmed']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          additional_telephone_number == o.additional_telephone_number &&
          allow_proactive_chat == o.allow_proactive_chat &&
          appraisals_viewable_by_ro == o.appraisals_viewable_by_ro &&
          chat_wanted_message == o.chat_wanted_message &&
          chat_wanted == o.chat_wanted &&
          delegate_ids == o.delegate_ids &&
          directorate_id == o.directorate_id &&
          dormant_reason == o.dormant_reason &&
          dormant == o.dormant &&
          dummy_account == o.dummy_account &&
          email == o.email &&
          esr_role_id == o.esr_role_id &&
          first_name == o.first_name &&
          has_eleave == o.has_eleave &&
          has_job_planning == o.has_job_planning &&
          has_medical_revalidation == o.has_medical_revalidation &&
          has_msf == o.has_msf &&
          is_trainee == o.is_trainee &&
          last_name == o.last_name &&
          location_org_l4_id == o.location_org_l4_id &&
          medic_group_ids == o.medic_group_ids &&
          medical_role_ids == o.medical_role_ids &&
          position_title_id == o.position_title_id &&
          preferred_name == o.preferred_name &&
          recommendation_not_applicable == o.recommendation_not_applicable &&
          recommendation_not_applicable_reason == o.recommendation_not_applicable_reason &&
          role_ids == o.role_ids &&
          site_name_id == o.site_name_id &&
          speciality_id == o.speciality_id &&
          team_org_l5_id == o.team_org_l5_id &&
          tenant_id == o.tenant_id &&
          telephone_number == o.telephone_number &&
          title == o.title &&
          trust_end_date == o.trust_end_date &&
          trust_start_date == o.trust_start_date &&
          ui_employee_number == o.ui_employee_number &&
          welcome_confirmed == o.welcome_confirmed
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [additional_telephone_number, allow_proactive_chat, appraisals_viewable_by_ro, chat_wanted_message, chat_wanted, delegate_ids, directorate_id, dormant_reason, dormant, dummy_account, email, esr_role_id, first_name, has_eleave, has_job_planning, has_medical_revalidation, has_msf, is_trainee, last_name, location_org_l4_id, medic_group_ids, medical_role_ids, position_title_id, preferred_name, recommendation_not_applicable, recommendation_not_applicable_reason, role_ids, site_name_id, speciality_id, team_org_l5_id, tenant_id, telephone_number, title, trust_end_date, trust_start_date, ui_employee_number, welcome_confirmed].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
